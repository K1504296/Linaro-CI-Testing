- project:
    name: tcwg_kernel-llvm
    toolchain_name:
      - llvm:
          binutils_branch: no_binutils_branch
          gcc_branch: no_gcc_branch
    toolchain_ver:
      - master:
          llvm_branch: master
      - release:
          llvm_branch: release_70
    target:
      - aarch64
      - arm
    linux:
      - next:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
          linux_branch: master
      - mainline:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
          linux_branch: master
      - stable:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          linux_branch: linux-4.18.y
      - lts:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          linux_branch: linux-4.14.y
    linux_config:
      - defconfig
      - allmodconfig
      - allyesconfig
      - allnoconfig
    component:
      - llvm
      - linux
    jobs:
      - 'tcwg_kernel-trigger-{component}-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
      - 'tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
      - 'tcwg_kernel-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
- view:
    name: tcwg_kernel-llvm
    view-type: list
    regex: 'tcwg_kernel-.*-llvm.*'

- project:
    name: tcwg_kernel-gnu
    toolchain_name:
      - gnu:
          llvm_branch: no_llvm_branch
    toolchain_ver:
      - master:
          binutils_branch: master
          gcc_branch: master
      - release:
          binutils_branch: binutils-2_31-branch
          gcc_branch: gcc-8-branch
    target:
      - aarch64
      - arm
    linux:
      - next:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
          linux_branch: master
      - mainline:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
          linux_branch: master
      - stable:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          linux_branch: linux-4.18.y
      - lts:
          linux_url: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          linux_branch: linux-4.14.y
    linux_config:
      - defconfig
      - allmodconfig
      - allyesconfig
      - allnoconfig
    component:
      - binutils
      - gcc
      - linux
    jobs:
      - 'tcwg_kernel-trigger-{component}-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
      - 'tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
      - 'tcwg_kernel-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
- view:
    name: tcwg_kernel-gnu
    view-type: list
    regex: 'tcwg_kernel-.*-gnu.*'

- scm:
    name: llvm-scm
    scm:
        - git:
            url: 'https://github.com/llvm-project/llvm-project-20170507.git'
            branches:
              - 'refs/heads/{llvm_branch}'
            basedir: llvm
            skip-tag: true
            sparse-checkout:
              paths:
                - llvm/README.txt
            reference-repo: /home/tcwg-buildslave/snapshots-ref/llvm-project-20170507.git
            wipe-workspace: false
            clean:
              before: true
            prune: true
- scm:
    name: binutils-scm
    scm:
        - git:
            url: 'git://sourceware.org/git/binutils-gdb.git'
            branches:
              - 'refs/heads/{binutils_branch}'
            basedir: binutils
            skip-tag: true
            sparse-checkout:
              paths:
                - README
            reference-repo: /home/tcwg-buildslave/snapshots-ref/binutils-gdb.git
            wipe-workspace: false
            clean:
              before: true
            prune: true
- scm:
    name: gcc-scm
    scm:
        - git:
            url: 'git://gcc.gnu.org/git/gcc.git'
            branches:
              - 'refs/heads/{gcc_branch}'
            basedir: gcc
            skip-tag: true
            sparse-checkout:
              paths:
                - README
            reference-repo: /home/tcwg-buildslave/snapshots-ref/gcc.git
            wipe-workspace: false
            clean:
              before: true
            prune: true
- scm:
    name: linux-scm
    scm:
        - git:
            url: '{linux_url}'
            branches:
              - 'refs/heads/{linux_branch}'
            basedir: linux
            skip-tag: true
            sparse-checkout:
              paths:
                - README
            reference-repo: /home/tcwg-buildslave/snapshots-ref/linux.git
            wipe-workspace: false
            clean:
              before: true
            prune: true

- property:
    name: default_properties
    properties:
      - authorization:
          anonymous:
            - job-read
            - job-extended-read
          linaro:
            - job-build
            - job-cancel
      - build-discarder:
          days-to-keep: 30
          num-to-keep: 30

- job-template:
    name: tcwg_kernel-trigger-{component}-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
    project-type: freestyle
    defaults: global
    properties:
      - default_properties
      - build-blocker:
          blocking-jobs:
            - "tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}"
            - "tcwg_kernel-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}"
          queue-scanning: 'ALL'
    disabled: false
    node: tcwg-coordinator
    concurrent: false
    display-name: 'TCWG BBB RRv7 Trigger Linux-{linux}-{linux_config} @ {target} @ {toolchain_name}-{toolchain_ver} @ {component}'
    workspace: workspace/tcwg_kernel-{toolchain_name}/$JOB_NAME
    scm:
      - '{component}-scm':
          llvm_branch: '{llvm_branch}'
          binutils_branch: '{binutils_branch}'
          gcc_branch: '{gcc_branch}'
          linux_url: '{linux_url}'
          linux_branch: '{linux_branch}'
    triggers:
      - pollscm:
          cron: 'H H * * *'
    wrappers:
        - timeout:
            timeout: 600
        - timestamps
    builders:
      - trigger-builds:
          - project: tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
            predefined-parameters: |
              current_project={component}
              current_rev=$GIT_COMMIT

- parameter:
    name: llvm-parameters
    parameters:
      - choice:
          name: current_project
          choices:
            - llvm
            - linux
          description: 'Project to {action}'

- parameter:
    name: gnu-parameters
    parameters:
      - choice:
          name: current_project
          choices:
            - binutils
            - gcc
            - linux
          description: 'Project to {action}'

- scm:
    name: jenkins-scripts
    scm:
      - git:
          url: https://git-us.linaro.org/toolchain/jenkins-scripts.git
          refspec: +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/*
          branches:
            - $scripts_branch
          basedir: jenkins-scripts
          skip-tag: true
          reference-repo: /home/tcwg-buildslave/snapshots-ref/jenkins-scripts.git
          wipe-workspace: false
          clean:
            before: true
          prune: true

- job-template:
    name: tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
    project-type: freestyle
    defaults: global
    properties:
      - default_properties
      - build-blocker:
          blocking-jobs:
            - "tcwg_kernel-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}"
          queue-scanning: 'ALL'
    parameters:
      - '{toolchain_name}-parameters':
          action: build
      - string:
          name: current_rev
          default: default
          description: "Git rev of $current_project to build"
      - bool:
          name: reset_baseline
          default: false
          description: "Whether to reset baseline to results of this build"
      - string:
          name: distro
          default: xenial
          description: 'Distro image to use'
      - string:
          name: scripts_branch
          default: master
          description: 'Scripts revision to use'
    disabled: false
    node: tcwg-x86_64-build
    concurrent: false
    display-name: 'TCWG BBB RRv7 Build Linux-{linux}-{linux_config} @ {target} @ {toolchain_name}-{toolchain_ver}'
    workspace: workspace/tcwg_kernel-{toolchain_name}/$JOB_NAME
    scm:
      - jenkins-scripts
    wrappers:
      - timeout:
          timeout: 600
      - timestamps
      - ssh-agent-credentials:
          # tcwg-buildslave user id
          users:
            - 'e0958a95-204f-4c14-a66c-5e2be6c5d50a'
    builders:
        - shell: |
            #!/bin/bash
            set -e
            echo "=== Print out environment for debug purposes ==="
            env | grep "GERRIT\|GIT"
            echo "=== Environment end  ==="
            set -x
            # Delete artifacts now to avoid re-using stale artifacts if
            # below docker-run.sh fails to start up a container.
            rm -rf artifacts/
            build_name="#$BUILD_NUMBER-$current_project"
            echo "$build_name" > build-name
        - build-name-setter:
            name: 'build-name'
            file: true
        - shell: |
            #!/bin/bash
            set -ex
            ./jenkins-scripts/docker-run.sh \
            --distro $distro \
            -- \
            ./jenkins-scripts/tcwg_kernel-build.sh \
            @@{toolchain_name}-{toolchain_ver} @@linux-{linux} \
            --mode "jenkins-full" \
            --current_project "$current_project" \
            --current_rev "$current_rev" \
            --linux_config "{linux_config}" \
            --reset_baseline "$reset_baseline" \
            --target "{target}" \
            --toolchain "{toolchain_name}" &
            res=0 && wait $! || res=$?

            if [ $res != 0 ]; then
              touch artifacts/failures
            fi

            name="#$BUILD_NUMBER-$current_project"
            if [ -e artifacts/results ]; then
              name="$name-R$(tail -n1 artifacts/results)"
            fi
            if [ -e artifacts/distance-to-baseline ]; then
              name="$name-B$(cat artifacts/distance-to-baseline)"
            fi
            if $reset_baseline; then
              name="$name-baseline"
              # Don't trigger bisect if this [possibly failed] build is
              # the new baseline.
              rm -f artifacts/trigger-bisect-on-failure
            fi
            if [ ! -f artifacts/failures ]; then
              rm -f artifacts/trigger-bisect-on-failure
            fi
            if [ -f artifacts/trigger-bisect-on-failure ]; then
              name="$name-bisect"
              echo "distro=$distro" >> artifacts/trigger-bisect-on-failure
              echo "scripts_branch=$scripts_branch" >> artifacts/trigger-bisect-on-failure
            fi

            echo "$name" > build-name
        - build-name-setter:
            name: 'build-name'
            file: true
        - conditional-step:
            condition-kind: file-exists
            condition-filename: artifacts/trigger-bisect-on-failure
            steps:
              - trigger-builds:
                  - project: tcwg_kernel-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
                    property-file: artifacts/trigger-bisect-on-failure
        - shell: |
            #!/bin/bash
            if [ -f artifacts/failures ]; then
              exit 1
            fi
    publishers:
        - archive:
            artifacts: 'artifacts/**'
            latest-only: false

- job-template:
    name: tcwg_kernel-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
    project-type: freestyle
    defaults: global
    properties:
      - default_properties
    parameters:
      - '{toolchain_name}-parameters':
          action: bisect
      - string:
          name: baseline_rev
          default: default
          description: "Baseline revision"
      - string:
          name: bad_rev
          default: default
          description: "Bad revision"
      - string:
          name: distro
          default: xenial
          description: 'Distro image to use'
      - string:
          name: scripts_branch
          default: master
          description: 'Scripts revision to use'
    disabled: false
    node: tcwg-x86_64-build
    concurrent: false
    display-name: 'TCWG BBB RRv7 Bisect Linux-{linux}-{linux_config} @ {target} @ {toolchain_name}-{toolchain_ver}'
    workspace: workspace/tcwg_kernel-{toolchain_name}/$JOB_NAME
    scm:
      - jenkins-scripts
    wrappers:
      - timeout:
          timeout: 1440
      - timestamps
      - ssh-agent-credentials:
          # tcwg-buildslave user id
          users:
            - 'e0958a95-204f-4c14-a66c-5e2be6c5d50a'
    builders:
        - shell: |
            #!/bin/bash
            set -e
            echo "=== Print out environment for debug purposes ==="
            env | grep "GERRIT\|GIT"
            echo "=== Environment end  ==="
            set -x
            build_name="#$BUILD_NUMBER-$current_project"
            echo "$build_name" > build-name
        - build-name-setter:
            name: 'build-name'
            file: true
        - shell: |
            #!/bin/bash
            set -ex
            ./jenkins-scripts/docker-run.sh \
            --distro $distro \
            -- \
            ./jenkins-scripts/tcwg_kernel-bisect.sh \
            @@{toolchain_name}-{toolchain_ver} @@linux-{linux} \
            --confirm_failure true \
            --current_project "$current_project" \
            --baseline_rev "$baseline_rev" \
            --bad_rev "$bad_rev" \
            --linux_config "{linux_config}" \
            --target "{target}" \
            --toolchain "{toolchain_name}"

            for i in artifacts/trigger-1-reset-baseline artifacts/trigger-2-build-master; do
              if [ -f $i ]; then
                echo "distro=$distro" >> $i
                echo "scripts_branch=$scripts_branch" >> $i
              fi
            done

            CI_MAIL_RECIPIENTS="tcwg-validation@linaro.org, maxim.kuvyrkov@linaro.org"
            if [ -f artifacts/first-bad ]; then
              echo "#$BUILD_NUMBER-$current_project-$(cat artifacts/first-bad)" > build-name

              # Email developers on successful bisects.
              case "{toolchain_name}:$current_project" in
                gnu:*) CI_MAIL_RECIPIENTS="$CI_MAIL_RECIPIENTS, christophe.lyon@linaro.org" ;;
                llvm:linux) CI_MAIL_RECIPIENTS="$CI_MAIL_RECIPIENTS, arnd@linaro.org, mark.brown@linaro.org, ndesaulniers@google.com" ;;
                llvm:llvm) CI_MAIL_RECIPIENTS="$CI_MAIL_RECIPIENTS, adhemerval.zanella@linaro.org, ndesaulniers@google.com, yvan.roux@linaro.org" ;;
              esac
            fi
            if [ x"$ROOT_BUILD_CAUSE" != x"SCMTRIGGER" ]; then
              CI_MAIL_RECIPIENTS="maxim.kuvyrkov@linaro.org"
            fi
            echo "CI_MAIL_RECIPIENTS=$CI_MAIL_RECIPIENTS" > ci_mail_parameters
        - build-name-setter:
            name: 'build-name'
            file: true
        - conditional-step:
            condition-kind: file-exists
            condition-filename: artifacts/trigger-1-reset-baseline
            steps:
              - trigger-builds:
                  - project: tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
                    property-file: artifacts/trigger-1-reset-baseline
        - conditional-step:
            condition-kind: file-exists
            condition-filename: artifacts/trigger-2-build-master
            steps:
              - trigger-builds:
                  - project: tcwg_kernel-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
                    property-file: artifacts/trigger-2-build-master
        - inject:
            properties-file: ci_mail_parameters
    publishers:
        - archive:
            artifacts: 'artifacts/**'
            latest-only: false
        - email-ext:
            recipients: '$CI_MAIL_RECIPIENTS'
            content-type: text
            body: |
                Bisected ${{current_project}} on {target} @ {toolchain_name}-{toolchain_ver} @ linux-{linux}-{linux_config} between bad ${{bad_rev}} and baseline ${{baseline_rev}} .
                Bisect log: ${{PROJECT_URL}}${{BUILD_NUMBER}}/artifact/artifacts/bisect.log/*view*/
                Artifacts: ${{PROJECT_URL}}${{BUILD_NUMBER}}/artifact/artifacts/
                Build URL: ${{PROJECT_URL}}${{BUILD_NUMBER}}/
                Build log: ${{PROJECT_URL}}${{BUILD_NUMBER}}/consoleText
            always: true



- job-template:
    name: tcwg-{toolchain_name}-kernel-build-{target}-{toolchain_ver}-{linux}-{linux_config}
    project-type: freestyle
    defaults: global
    properties:
      - default_properties
    disabled: true
    node: tcwg-coordinator
    display-name: 'DELETE ME'
