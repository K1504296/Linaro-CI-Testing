- job:
    name: linaro-art-stable-m-build-ARTTargetTest
    project-type: freestyle
    defaults: global
    properties:
        - authorization:
            anonymous:
                - job-discover
            linaro-android-builders:
                - job-read
                - job-extended-read
                - job-workspace
            linaro-art:
                - job-build
                - job-read
                - job-extended-read
                - job-workspace
        - build-discarder:
            days-to-keep: 60
            num-to-keep: 60
    parameters:
        - string:
            name: BUILD_CONFIG_REPO
            default: 'git://android.git.linaro.org/android-build-configs.git'
        - string:
            name: BUILD_CONFIG_BRANCH
            default: 'master'
        - string:
            name: BUILD_CONFIG_FILENAME
            default: 'linaro-art-stable-m-aosp_flounder'
        - string:
            name: CURRENT_FAILING_ART_TESTS
            default:
        - password:
            name: PRIVATE_KEY
            default: ${PRIVATE_KEY}
    disabled: false
    node: docker-utopic-art-test
    display-name: 'linaro-art-stable-m-build-ARTTargetTest'
    concurrent: true
    triggers:
        - gerrit:
            trigger-on:
                - comment-added-contains-event:
                    comment-contains-value: '.*IncludeAllTest.*'
            projects:
                - project-compare-type: 'PLAIN'
                  project-pattern: 'linaro-art/platform/build'
                  branches:
                      - branch-pattern: 'lor_marshmallow'
                - project-compare-type: 'PLAIN'
                  project-pattern: 'linaro-art/platform/art'
                  branches:
                      - branch-pattern: 'lor_marshmallow'
                - project-compare-type: 'PLAIN'
                  project-pattern: 'linaro-art/platform/external/vixl'
                  branches:
                      - branch-pattern: 'lor_marshmallow'
    wrappers:
        - timestamps
        - timeout:
            timeout: 500
    builders:
        - shell: |
            #!/bin/bash -xe

            # Build scripts
            ANDROID_BUILD_DIR="${HOME}/srv/${JOB_NAME}/android"
            ART_BUILD_SCRIPTS_DIR="${WORKSPACE}/art-build-scripts"
            git clone https://android-git.linaro.org/git/linaro-art/art-build-scripts.git ${ART_BUILD_SCRIPTS_DIR}

            # Private key
            wget https://git.linaro.org/people/daniel.diaz/ci/misc-utils.git/blob_plain/HEAD:/add-private-key.sh
            source add-private-key.sh

            export NO_TMPFS_TARGET_PRODUCT=y
            cd ${ART_BUILD_SCRIPTS_DIR}/jenkins
            ./setup_host.sh
            ./setup_android.sh

            cd ${ANDROID_BUILD_DIR}
            perl scripts/jenkins/test_launcher.pl \
              scripts/test_art_target.sh --default
    publishers:
        - archive:
            artifacts: '*.txt, *.xml'
        - logparser:
            parse-rules: '/var/lib/jenkins/userContent/android-art.parse'
            unstable-on-warning: false
            fail-on-error: false
        - groovy-postbuild:
            script: |
              import hudson.model.*
              def currentBuild = Thread.currentThread().executable
              def description = ""
              def matcher = manager.getLogMatcher(".*repo sync failed.*")
              if ( matcher?.matches()) {
                  manager.addShortText("repo sync failed")
              }
              matcher = manager.getLogMatcher(".*patch merge failed.*")
              if ( matcher?.matches()) {
                  manager.addShortText("merge failed")
              }
              matcher = manager.getLogMatcher(".*error: no devices/emulators found.*")
              if ( matcher?.matches()) {
                  manager.addShortText("No Device Found")
              }
              matcher = manager.getLogMatcher(".*buildbot-build setup failed.*")
              if ( matcher?.matches()) {
                  manager.addShortText("buildbot-build setup failed.")
              }
              matcher = manager.getLogMatcher(".* tests have failed")
              if (matcher?.matches()) {
                  def test = matcher.group(0).split(" ")
                  manager.listener.logger.println test.length
                  i=0
                  while( i<test.length-3) {
                       description+="${test[i]} failed<br>"
                       i++;
                  }
              currentBuild.setDescription(description)
              manager.addShortText("Tests failed")
              }
        - naginator:
            rerun-unstable-builds: true
            max-failed-builds: 1
